{"version":3,"sources":["constants.js","buttons.js","ui.js","gameState.js","init.js"],"names":["TICK_RATE","ICONS","RAIN_CHANCE","SCENES","DAY_LENGTH","NIGHT_LENGTH","getNextHungerTime","clock","Math","floor","random","getNextDieTime","getNextPoopTime","toggleHighlighted","icon","isShowIcon","document","querySelector","classList","toggle","initButtons","handleUserAction","selectedIconIndex","addEventListener","buttonClick","target","contains","length","changeFoxState","state","className","changeScene","togglePoopBag","show","writeModal","text","innerHTML","gameState","current","wakeTime","sleepTime","hungryTime","dieTime","poopTime","timeToStartCelebrating","timeToEndCelebrating","tick","wake","sleep","getHungry","die","startCelebrating","endCelebrating","poop","console","log","startGame","DAY_CHANCE","scene","determineFoxState","clearTimes","includes","changeWeather","cleanUpPoop","feed","bind","init","nextTimeToTick","Date","now","requestAnimationFrame","nextAnimationFrame"],"mappings":";AAgBO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,gBAAA,QAAA,eAAA,QAAA,kBAAA,QAAA,aAAA,QAAA,WAAA,QAAA,OAAA,QAAA,YAAA,QAAA,MAAA,QAAA,eAAA,EAhBA,IAAMA,EAAY,IAgBlB,QAAA,UAAA,EAfA,IAAMC,EAAQ,CAAC,OAAQ,OAAQ,WAe/B,QAAA,MAAA,EAdA,IAAMC,EAAc,GAcpB,QAAA,YAAA,EAbA,IAAMC,EAAS,CAAC,MAAO,QAavB,QAAA,OAAA,EAZA,IAAMC,EAAa,GAYnB,QAAA,WAAA,EAXA,IAAMC,EAAe,EAWrB,QAAA,aAAA,EARA,IAAMC,EAAoB,SAACC,GACzBC,OAAAA,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAAIH,GAOtC,QAAA,kBAAA,EAJA,IAAMI,EAAiB,SAACJ,GACtBC,OAAAA,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAAIH,GAGtC,QAAA,eAAA,EAAA,IAAMK,EAAkB,SAACL,GACvBC,OAAAA,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,EAAIH,GADtC,QAAA,gBAAA;;ACkBN,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EAlCD,IAAA,EAAA,QAAA,eAEMM,EAAoB,SAACC,EAAMC,GAC/BC,SACGC,cAAkBhB,IAAAA,OAAAA,EAAMa,MAAAA,GACxBI,UAAAA,UAAUC,OAAO,cAAeJ,IAItB,SAASK,EAAYC,GAE9BC,IAAAA,EAAoB,EAsBxBN,SAASC,cAAc,YAAYM,iBAAiB,QApB3CC,SAAwB,GAAVC,IAAAA,EAAAA,EAAAA,OACjBA,EAAOP,UAAUQ,SAAS,aAE5Bb,EAAkBS,GAAmB,GAErCA,GAAqB,EAAIA,GAAqBrB,EAAM0B,MAAAA,OAEpDd,EAAkBS,GAAmB,IAC5BG,EAAOP,UAAUQ,SAAS,cAEnCb,EAAkBS,GAAmB,GAErCA,GAAqB,EAAIA,GAAqBrB,EAAM0B,MAAAA,OAEpDd,EAAkBS,GAAmB,IAGrCD,EAAiBpB,EAAMqB,MAAAA;;ACjBtB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,cAAA,QAAA,YAAA,QAAA,oBAAA,EAZA,IAAMM,EAAiB,SAAwBC,GACpDb,SAASC,cAAc,QAAQa,UAAuBD,WAAAA,OAAAA,IAWjD,QAAA,eAAA,EATA,IAAME,EAAc,SAAqBF,GAC9Cb,SAASC,cAAc,SAASa,UAAoBD,QAAAA,OAAAA,IAQ/C,QAAA,YAAA,EALA,IAAMG,EAAgB,SAAuBC,GAElDjB,SAASC,cAAc,aAAaC,UAAUC,OAAO,UAAWc,IAG3D,QAAA,cAAA,EAAA,IAAMC,EAAa,WAAoBC,IAAAA,EAAO,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAEnDnB,SAASC,cACP,UACAmB,UAAwCD,4BAAAA,OAAAA,EAF1C,WAFK,QAAA,WAAA;;AC2KQE,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,QAAAA,QAAAA,sBAAAA,EAxLf,IAAA,EAAA,QAAA,QACA,EAAA,QAAA,eAUMA,EAAY,CAChBC,QAAS,OACT/B,MAAO,EAEPgC,UAAW,EACXC,WAAY,EACZC,YAAa,EACbC,SAAU,EACVC,UAAW,EACXC,wBAAyB,EACzBC,sBAAuB,EAEvBC,KAAO,WAmBE,OAlBH,KAAKvC,QAAU,KAAKgC,SACjBQ,KAAAA,OACI,KAAKxC,QAAU,KAAKiC,UACxBQ,KAAAA,QACI,KAAKzC,QAAU,KAAKkC,WACxBQ,KAAAA,YACI,KAAK1C,QAAU,KAAKmC,QACxBQ,KAAAA,MACI,KAAK3C,QAAU,KAAKqC,uBACxBO,KAAAA,mBACI,KAAK5C,QAAU,KAAKsC,qBACxBO,KAAAA,iBACI,KAAK7C,QAAU,KAAKoC,UACxBU,KAAAA,OAEF9C,KAAAA,QACL+C,QAAQC,IAAI,QAAS,KAAKhD,OAEnB,KAAKA,OAGdiD,UAAY,YACV,EAAA,EAAA,cACKlB,KAAAA,QAAU,WACVC,KAAAA,SAAW,KAAKhC,MAAQ,GACd,EAAA,EAAA,gBAAA,QACH,EAAA,EAAA,aAAA,QAEdwC,KAAO,WAEAT,KAAAA,QAAU,SAETmB,IAAAA,EAAajD,KAAKE,SACnBgD,KAAAA,MAAQD,EAAavD,EAAb,YAA2B,EAAI,GAChCC,EAAAA,EAAAA,aAAAA,EAAO,OAAA,KAAKuD,QAEnBC,KAAAA,oBAEApB,KAAAA,UAAY,EACZC,KAAAA,UAAY,KAAKjC,MAAQH,EAA9B,WACKqC,KAAAA,YAAa,EAAkB,EAAA,mBAAA,KAAKlC,OACzC+C,QAAQC,IAAI,KAAKd,WAAY,8BAE/BO,MAAQ,WACDV,KAAAA,QAAU,SACA,EAAA,EAAA,gBAAA,UACH,EAAA,EAAA,aAAA,SACPsB,KAAAA,aACArB,KAAAA,SAAW,KAAKhC,MAAQF,EAA7B,cAEF4C,UAAY,WACLX,KAAAA,QAAU,SACVI,KAAAA,SAAU,EAAe,EAAA,gBAAA,KAAKnC,QACpB,EAAA,EAAA,gBAAA,UACVkC,KAAAA,YAAc,GAErBY,KAAO,WACAf,KAAAA,QAAU,UACVK,KAAAA,UAAY,EACZD,KAAAA,SAAU,EAAe,EAAA,gBAAA,KAAKnC,QACpB,EAAA,EAAA,gBAAA,YAEjB2C,IAAM,WACCZ,KAAAA,QAAU,QACA,EAAA,EAAA,gBAAA,SACH,EAAA,EAAA,aAAA,QACPsB,KAAAA,cACM,EAAA,EAAA,YAAA,2DAEbT,iBAAmB,WACZb,KAAAA,QAAU,eACA,EAAA,EAAA,gBAAA,aACVM,KAAAA,wBAA0B,EAC1BC,KAAAA,qBAAuB,KAAKtC,MAAQ,GAE3C6C,eAAiB,WACVd,KAAAA,QAAU,SACVO,KAAAA,sBAAwB,EACxBc,KAAAA,qBACS,EAAA,EAAA,gBAAA,IAEhBA,kBAAoB,WACG,WAAjB,KAAKrB,UACoB,SAAvBnC,EAAO,OAAA,KAAKuD,QACC,EAAA,EAAA,gBAAA,SAEA,EAAA,EAAA,gBAAA,YAIrBE,WAAa,WACNrB,KAAAA,UAAY,EACZC,KAAAA,WAAa,EACbC,KAAAA,YAAc,EACdC,KAAAA,SAAW,EACXC,KAAAA,UAAY,EACZC,KAAAA,wBAA0B,EAC1BC,KAAAA,sBAAwB,GAI/BxB,iBAAiBP,SAAAA,GAGb,IAAA,CAAC,QAAS,UAAW,cAAe,YAAY+C,SAAS,KAAKvB,SAM5D,GAAiB,SAAjB,KAAKA,SAAuC,SAAjB,KAAKA,QAK5BxB,OAAAA,GACD,IAAA,UACEgD,KAAAA,gBACL,MACG,IAAA,OACEC,KAAAA,cACL,MACG,IAAA,OACEC,KAAAA,YAZFR,KAAAA,aAiBTM,cAAgB,WACTJ,KAAAA,OAAS,KAAKA,MAAQ,GAAK,GACpBvD,EAAAA,EAAAA,aAAAA,EAAO,OAAA,KAAKuD,QACnBC,KAAAA,oBACLL,QAAQC,IAAI,kBAEdQ,YAAc,WACZT,QAAQC,IAAI,eACS,YAAjB,KAAKjB,UAIJI,KAAAA,SAAW,GACF,EAAA,EAAA,gBAAA,GACTS,KAAAA,mBACAV,KAAAA,YAAa,EAAkB,EAAA,mBAAA,KAAKlC,SAE3CyD,KAAO,WACLV,QAAQC,IAAI,QACS,WAAjB,KAAKjB,UAIJA,KAAAA,QAAU,UACVI,KAAAA,SAAW,GACD,EAAA,EAAA,gBAAA,UACVE,KAAAA,uBAAyB,KAAKrC,MAAQ,EACtCoC,KAAAA,UAAW,EAAgB,EAAA,iBAAA,KAAKpC,UAI5Bc,EAAmBgB,EAAUhB,iBAAiB4C,KAAK5B,GACjDA,QAAAA,iBAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;AC7JX,aA1BJ,IAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,cACA,EAAA,EAAA,QAAA,gBAwBI,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GArBJ,SAAS6B,IACPZ,QAAQC,IAAI,kBACAlC,EAAAA,EAAAA,SAAAA,EAAZ,kBACI8C,IAAAA,EAAiBC,KAAKC,MAe1BC,sBAZSC,SAAAA,IACDF,IAAAA,EAAMD,KAAKC,MAEbF,GAAkBE,IACVvB,EAAAA,QAAAA,OAEVqB,EAAiBE,EAAMrE,EAAvB,WAGFsE,sBAAsBC,KAM1BL","file":"init.5186ffda.js","sourceRoot":"../src","sourcesContent":["export const TICK_RATE = 3000;\nexport const ICONS = [\"fish\", \"poop\", \"weather\"];\nexport const RAIN_CHANCE = 0.2;\nexport const SCENES = [\"day\", \"rain\"];\nexport const DAY_LENGTH = 60;\nexport const NIGHT_LENGTH = 4;\n\n//random number between 0 and 2 and add 5 => random between 5 and 7\nexport const getNextHungerTime = (clock) => {\n  return Math.floor(Math.random() * 3) + 3 + clock; //5\n};\n\nexport const getNextDieTime = (clock) => {\n  return Math.floor(Math.random() * 3) + 3 + clock;\n};\n\nexport const getNextPoopTime = (clock) => {\n  return Math.floor(Math.random() * 3) + 3 + clock;\n};\n","import { ICONS } from \"./constants\";\n\nconst toggleHighlighted = (icon, isShowIcon) => {\n  document\n    .querySelector(`.${ICONS[icon]}-icon`)\n    .classList.toggle(\"highlighted\", isShowIcon);\n};\n\n// function to handle user actions\nexport default function initButtons(handleUserAction) {\n  //index of the currently selected icon- closed over variables\n  let selectedIconIndex = 0;\n  // function clickHandler taking in event.target - destructuring target from event object\n  function buttonClick({ target }) {\n    if (target.classList.contains(\"left-btn\")) {\n      // toggle current selected icon highlight false\n      toggleHighlighted(selectedIconIndex, false);\n      // select left icon and if at zero(first icon), (2 + 0)%3 == 2; select at index 2,( last icon) essentially creating a loop\n      selectedIconIndex = (2 + selectedIconIndex) % ICONS.length;\n      // toggle  left selected icon highlight true\n      toggleHighlighted(selectedIconIndex, true);\n    } else if (target.classList.contains(\"right-btn\")) {\n      // toggle current selected icon highlight false\n      toggleHighlighted(selectedIconIndex, false);\n      // select left icon and if at 2nd(last icon), (1 + 2)%3 == 0; select at index 0,(first icon)essentially creating a loop\n      selectedIconIndex = (1 + selectedIconIndex) % ICONS.length;\n      // toggle left selected icon highlight true\n      toggleHighlighted(selectedIconIndex, true);\n    } else {\n      // middle button - execute handleUserAction and pass in current selected Icon\n      handleUserAction(ICONS[selectedIconIndex]);\n    }\n  }\n  document.querySelector(\".buttons\").addEventListener(\"click\", buttonClick);\n}\n","//assigning named functions instead of arrow functions because it helps in debugging in stack trace and better for readability\nexport const changeFoxState = function changeFoxState(state) {\n  document.querySelector(\".fox\").className = `fox fox-${state}`;\n};\nexport const changeScene = function changeScene(state) {\n  document.querySelector(\".game\").className = `game ${state}`;\n};\n\nexport const togglePoopBag = function togglePoopBag(show) {\n  //if show == true, hidden == false and vice versa, so hidden = not show or !show\n  document.querySelector(\".poop-bag\").classList.toggle(\"hidden\", !show);\n};\n\nexport const writeModal = function writeModal(text = \"\") {\n  //if text is empty(default) , modal wont be displayed as we have set modal display none using modal:empty selector\n  document.querySelector(\n    \".modal\"\n  ).innerHTML = `<div class=\"modal-inner\">${text}</div>`;\n};\n","import { changeFoxState, changeScene, togglePoopBag, writeModal } from \"./ui\";\nimport {\n  RAIN_CHANCE,\n  SCENES,\n  DAY_LENGTH,\n  NIGHT_LENGTH,\n  getNextDieTime,\n  getNextHungerTime,\n  getNextPoopTime,\n} from \"./constants\";\n\nconst gameState = {\n  current: \"INIT\",\n  clock: 1,\n  //these could also be undefined,only initializing variable here\n  wakeTime: -1,\n  sleepTime: -1,\n  hungryTime: -1,\n  dieTime: -1,\n  poopTime: -1,\n  timeToStartCelebrating: -1,\n  timeToEndCelebrating: -1,\n  // tick function\n  tick() {\n    if (this.clock === this.wakeTime) {\n      this.wake();\n    } else if (this.clock === this.sleepTime) {\n      this.sleep();\n    } else if (this.clock === this.hungryTime) {\n      this.getHungry();\n    } else if (this.clock === this.dieTime) {\n      this.die();\n    } else if (this.clock === this.timeToStartCelebrating) {\n      this.startCelebrating();\n    } else if (this.clock === this.timeToEndCelebrating) {\n      this.endCelebrating();\n    } else if (this.clock === this.poopTime) {\n      this.poop();\n    }\n    this.clock++;\n    console.log(\"clock\", this.clock);\n    // waking up the fox\n    return this.clock;\n  },\n  // start game function and wake up function\n  startGame() {\n    writeModal();\n    this.current = \"HATCHING\";\n    this.wakeTime = this.clock + 1; //delay after hatching\n    changeFoxState(\"egg\");\n    changeScene(\"day\");\n  },\n  wake() {\n    //waking up\n    this.current = \"IDLING\";\n    //rain or not\n    const DAY_CHANCE = Math.random();\n    this.scene = DAY_CHANCE > RAIN_CHANCE ? 0 : 1; //0 - Day, 1 - Rain, RAIN_CHANCE from constants.js\n    changeScene(SCENES[this.scene]);\n    //change fox state to rain or idling mode\n    this.determineFoxState();\n    //updating times\n    this.wakeTime = -1; //turning off wakeTime\n    this.sleepTime = this.clock + DAY_LENGTH; //next sleep time which is after a day\n    this.hungryTime = getNextHungerTime(this.clock); //nest time to be hungry\n    console.log(this.hungryTime, \"this is time to be hungry\");\n  },\n  sleep() {\n    this.current = \"SLEEP\";\n    changeFoxState(\"sleep\");\n    changeScene(\"night\");\n    this.clearTimes(); // making sure nothing happens in the night\n    this.wakeTime = this.clock + NIGHT_LENGTH;\n  },\n  getHungry() {\n    this.current = \"HUNGRY\";\n    this.dieTime = getNextDieTime(this.clock);\n    changeFoxState(\"hungry\");\n    this.hungryTime = -1;\n  },\n  poop() {\n    this.current = \"POOPING\";\n    this.poopTime = -1;\n    this.dieTime = getNextDieTime(this.clock);\n    changeFoxState(\"pooping\");\n  },\n  die() {\n    this.current = \"DEAD\";\n    changeFoxState(\"dead\");\n    changeScene(\"dead\");\n    this.clearTimes();\n    writeModal(\"The fox died :( <br/> Press the middle button to start\");\n  },\n  startCelebrating() {\n    this.current = \"CElEBRATING\";\n    changeFoxState(\"celebrate\");\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = this.clock + 2;\n  },\n  endCelebrating() {\n    this.current = \"IDLING\";\n    this.timeToEndCelebrating = -1;\n    this.determineFoxState();\n    togglePoopBag(false);\n  },\n  determineFoxState() {\n    if (this.current === \"IDLING\") {\n      if (SCENES[this.scene] === \"rain\") {\n        changeFoxState(\"rain\");\n      } else {\n        changeFoxState(\"idling\");\n      }\n    }\n  },\n  clearTimes() {\n    this.wakeTime = -1;\n    this.sleepTime = -1;\n    this.hungryTime = -1;\n    this.dieTime = -1;\n    this.poopTime = -1;\n    this.timeToStartCelebrating = -1;\n    this.timeToEndCelebrating = -1;\n  },\n\n  // function to handle user Actions on buttons\n  handleUserAction(icon) {\n    // ignore any button clicks (icons) if the fox is sleeping, feeding , celebrating or hatching\n    if (\n      [\"SLEEP\", \"FEEDING\", \"CELEBRATING\", \"HATCHING\"].includes(this.current)\n    ) {\n      //do nothing\n      return;\n    }\n    // if current state is in init or dead, start new game\n    if (this.current === \"INIT\" || this.current === \"DEAD\") {\n      this.startGame();\n      return;\n    }\n    // connecting buttons(when respective icons) to their respective event handlers down below\n    switch (icon) {\n      case \"weather\":\n        this.changeWeather();\n        break;\n      case \"poop\":\n        this.cleanUpPoop();\n        break;\n      case \"fish\":\n        this.feed();\n        break;\n    }\n  },\n  // button events handlers\n  changeWeather() {\n    this.scene = (this.scene + 1) % 2; // or this.scene === 1 ? 0 : 1 ;\n    changeScene(SCENES[this.scene]);\n    this.determineFoxState();\n    console.log(\"changeWeather\");\n  },\n  cleanUpPoop() {\n    console.log(\"cleanUpPoop\");\n    if (this.current !== \"POOPING\") {\n      //do nothing\n      return;\n    }\n    this.dieTime = -1;\n    togglePoopBag(true);\n    this.startCelebrating();\n    this.hungryTime = getNextHungerTime(this.clock);\n  },\n  feed() {\n    console.log(\"feed\");\n    if (this.current !== \"HUNGRY\") {\n      //do nothing\n      return;\n    }\n    this.current = \"FEEDING\";\n    this.dieTime = -1;\n    changeFoxState(\"eating\");\n    this.timeToStartCelebrating = this.clock + 1;\n    this.poopTime = getNextPoopTime(this.clock);\n  },\n};\n//binding handleUserAction's 'this' to gameState regardless of the context handleUserAction is executed\nexport const handleUserAction = gameState.handleUserAction.bind(gameState);\nexport default gameState;\n","// imports\nimport { TICK_RATE } from \"./constants\";\nimport initButtons from \"./buttons\";\nimport gameState, { handleUserAction } from \"./gameState\";\n\n// game\nfunction init() {\n  console.log(\"starting game\");\n  initButtons(handleUserAction);\n  let nextTimeToTick = Date.now();\n\n  // recursive function to che\n  function nextAnimationFrame() {\n    const now = Date.now();\n\n    if (nextTimeToTick <= now) {\n      gameState.tick();\n      // requestAnimationFrame is going to be called a lot, so we put to condition to tick only in TICK_RATE time. here 3 seconds\n      nextTimeToTick = now + TICK_RATE;\n    }\n    // using browser API requestAnimation frame to keep running nextAnimationFrame\n    requestAnimationFrame(nextAnimationFrame);\n  }\n  // calling the first tick\n  requestAnimationFrame(nextAnimationFrame);\n}\n\ninit();\n"]}